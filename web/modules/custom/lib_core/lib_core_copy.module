<?php

/**
 * @file
 * lib_core_copy.module
 */

use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\GeneratedLink;
use Drupal\Core\Mail\MailFormatHelper;
use Drupal\views\ViewExecutable;
use Drupal\webform\Entity\Webform;
use Drupal\webform\Entity\WebformSubmission;

/**
 * Implements hook_views_pre_render().
 */
function lib_core_copy_views_pre_render(ViewExecutable $view) {
  if ($view->storage->id() == 'payment_methods') {
    $view->element['#attached']['library'][] = 'lib_core_copy/payment-methods';
  }
}

/**
 * Implements hook_forma_alter().
 */
function lib_core_copy_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ($form_id == 'views_exposed_form' && isset($form['field_product_type_target_id'])) {
    $form['field_product_type_target_id']['#attributes'] = [
      'placeholder' => 'Select a product to know its payment method',
    ];
    $form['actions']['submit']['#name'] = 'button-filter-product-type';
  }

  if ($form_id == 'views_exposed_form' && isset($form['#id']) && $form['#id'] == 'views-exposed-form-clauses-documents-page-2') {
    $form['actions']['submit']['#attributes']['class'][] = 'button--primary';
    $form['title']['#attributes']['placeholder'] = 'Encuentra la documentación que necesitas para tus procesos con Liberty';
    $form['title']['#size'] = 60;
    $form['#action'] = "/zona-de-cliente/clausulas-y-documentos";
  }
  if ($form_id == 'views_exposed_form' && isset($form['#id']) && $form['#id'] == 'views-exposed-form-faqs-page-1') {
    $form['actions']['submit']['#attributes']['class'][] = 'button--primary';
    $form['title']['#attributes']['placeholder'] = '¿En qué podemos ayudarte?';
    $form['title']['#size'] = 60;
    $form['#action'] = "/zona-de-cliente/preguntas-frecuentes";
  }
}

/**
 * Implements hook_views_pre_view().
 */
function lib_core_copy_views_pre_view(ViewExecutable $view, $display_id, array &$args) {
  $account = \Drupal::currentUser();
  if ($view->id() == 'my_special_view' && $account->hasPermission('my special permission') && $display_id == 'public_display') {
    $args[0] = 'custom value';
  }

  if ($view->id() == 'faqs' && $display_id == 'block_3') {
    $node = \Drupal::routeMatch()->getParameter('node');
    $category = $node->get('field_category_faq')->getValue();
    if (isset($category[0]['target_id'])) {
      $args[0] = $category[0]['target_id'];
    }
  }

  if (($view->id() == 'clauses_documents' && $display_id === 'page_1') || ($view->id() == 'faqs' && $display_id === 'page_2')) {
    $category = \Drupal::request()->query->get('category');
    if (!empty($category) && is_numeric($category) && $category > 0) {
      $args[0] = $category;
    }
  }
}

/**
 * Implements hook_theme().
 */
function lib_core_copy_theme($existing, $type, $theme, $path) {
  return [
    'tabs_assistances' => [
      'variables' => [
        'ramos' => NULL,
        'products' => NULL,
        'block_contact' => NULL,
      ],
      'template' => 'tabs_assistances',
    ],
    'tabs_documents_required' => [
      'variables' => [
        'ramos' => NULL,
        'products' => NULL,
        'block_contact' => NULL,
      ],
      'template' => 'tabs_documents_required',
    ],
  ];
}

/**
 * Implements hook_preprocess_file_link().
 */
function lib_core_copy_preprocess_file_link(&$variables) {
  if ($variables['link'] && $variables['link'] instanceof GeneratedLink) {
    $doc = new DOMDocument();
    $doc->loadHTML(mb_convert_encoding($variables['link']->getGeneratedLink(), 'HTML-ENTITIES', 'UTF-8'));
    $node = $doc->getElementsByTagName('a')[0];
    $node->setAttribute('target', '_blank');
    $variables['link']->setGeneratedLink($doc->saveHTML());
  }
}

/**
 * View alter.
 */
function lib_core_copy_node_view_alter(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display) {

  if ($entity->bundle() == 'campaign') {
    // @todo Agregar validacion a view mode full
    $build['#cache']['max-age'] = 0;
    \Drupal::service('page_cache_kill_switch')->trigger();
  }
}

/**
 * Lib core mail.
 */
function lib_core_copy_mail($key, &$message, $params) {
  $message['subject'] = $params['subject'];
  $message['body'][] = MailFormatHelper::htmlToText($params['body']);
  // $message['body'][] = '<html><body>' . $params['body'] . '</body></html>';
}

/**
 * Cron custom.
 */
function lib_core_copy_cron() {
  $date = strtotime("-1 day");
  $database = \Drupal::database();
  $database->query("delete from sessions where timestamp < '" . $date . "';");

  $file_system = \Drupal::service('file_system');
  $files = \Drupal::entityTypeManager()
    ->getStorage('file')
    ->getQuery()
    ->condition('uri', '%pqr%', 'LIKE')
    ->accessCheck(FALSE)
    ->execute();
  $storage_handler = \Drupal::entityTypeManager()->getStorage("file");

  foreach ($files as $file) {
    $locale_directory = $storage_handler->load($file)->get('uri')->getValue()[0]['value'];
    $directory = explode('/', $locale_directory);
    $uri = $directory[0] . '//' . $directory[2] . '/';
    if (is_dir($uri)) {
      if (!$file_system->scanDirectory($uri, '/.*/')) {
        $file_system->rmdir($uri);
      }
    }

  }
  $entities = $storage_handler->loadMultiple($files);
  $storage_handler->delete($entities);

}

/**
 * Create submission webform.
 */
function lib_core_copy_createsubmit($webform_data) {

  // Convert to webform values format.
  $values = $webform_data;

  $values['webform_id'] = $webform_data['webform_id'];
  $values['entity_type'] = NULL;
  $values['entity_id'] = NULL;

  // Don't submit webform ID.
  unset($values['data']['webform_id']);
  unset($values['data']['back']);
  unset($values['data']['next']);
  unset($values['data']['form_build_id']);
  unset($values['data']['form_token']);
  unset($values['data']['form_token']);
  unset($values['data']['form_id']);
  unset($values['data']['debugEmail']);
  unset($values['data']['debug']);
  unset($values['data']['retURL']);
  unset($values['data']['orgid']);

  // Check for a valid webform.
  $webform = Webform::load($values['webform_id']);

  $submission = WebformSubmission::create([
    'webform_id' => $webform->id(),
  ]);

  foreach ($values['data'] as $field_key => $field_value) {
    $submission->setElementData(strtolower($field_key), $field_value);
  }
  $submission->save();
}
